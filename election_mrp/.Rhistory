kable(caption = "Comparing Logistic Regression Estimates by Race",
col.names = c("Gender", "Age", "Race", "Estimate"))
kable_styling(table2, latex_options = "hold_position")
table2 <- ipums_predictors[c(1,2,21,24,3,7,29,9),1:4] %>%
kable(caption = "Comparing Logistic Regression Estimates by Race",
col.names = c("Gender", "Age", "Race", "Estimate"), row.names = NULL)
table2 <- ipums_predictors[c(1,2,21,24,3,7,29,9),1:4] %>%
kable(caption = "Comparing Logistic Regression Estimates by Race",
col.names = c("Gender", "Age", "Race", "Estimate"), row.names = NA
kable_styling(table2, latex_options = "hold_position")
table2 <- ipums_predictors[c(1,2,21,24,3,7,29,9),1:4] %>%
kable(caption = "Comparing Logistic Regression Estimates by Race",
col.names = c("Gender", "Age", "Race", "Estimate"), row.names = NA)
kable_styling(table2, latex_options = "hold_position")
table2 <- ipums_predictors[c(1,2,21,24,3,7,29,9),1:4] %>%
kable(caption = "Comparing Logistic Regression Estimates by Race",
col.names = c("Gender", "Age", "Race", "Estimate"), row.names = rep(NULL, 8))
table2 <- ipums_predictors[c(1,2,21,24,3,7,29,9),1:4] %>%
kable(caption = "Comparing Logistic Regression Estimates by Race",
col.names = c("Gender", "Age", "Race", "Estimate"), row.names = 1:10)
table2 <- ipums_predictors[c(1,2,21,24,3,7,29,9),1:4] %>%
kable(caption = "Comparing Logistic Regression Estimates by Race",
col.names = c("Gender", "Age", "Race", "Estimate"), row.names = 1)
kable_styling(table2, latex_options = "hold_position")
ipums_race <- ipums_predictors[c(1,2,21,24,3,7,29,9),1:4]
rownames(ipums_race) <- NA
ipums_race <- ipums_predictors[c(1,2,21,24,3,7,29,9),1:4]
rownames(ipums_race) <- NULL
table2 <- ipums_race %>%
kable(caption = "Comparing Logistic Regression Estimates by Race",
col.names = c("Gender", "Age", "Race", "Estimate"))
kable_styling(table2, latex_options = "hold_position")
ipums_age <- ipums_predictors[c(1,2,21,24,3,7,29,9),1:4]
rownames(ipums_race) <- NULL
table3 <- ipums_age %>%
kable(caption = "Comparing Logistic Regression Estimates by Age",
col.names = c("Gender", "Age", "Race", "Estimate"))
kable_styling(table3, latex_options = "hold_position")
ipums_age <- ipums_predictors[c(1,13,5,10,15,11,7,17),1:4]
rownames(ipums_age) <- NULL
table3 <- ipums_age %>%
kable(caption = "Comparing Logistic Regression Estimates by Age",
col.names = c("Gender", "Age", "Race", "Estimate"))
kable_styling(table3, latex_options = "hold_position")
ipums_race <- ipums_predictors[c(1,2,21,24,3,7,29,9),1:4]
rownames(ipums_race) <- NULL
table2 <- ipums_race %>%
kable(caption = "Comparing Logistic Regression Estimates by Race",
col.names = c("Gender", "Age", "Race", "Estimate"))
kable_styling(table2, latex_options = "hold_position")
ipums_age <- ipums_predictors[c(1,13,5,10,15,11,7,17),1:4]
rownames(ipums_age) <- NULL
table3 <- ipums_age %>%
kable(caption = "Comparing Logistic Regression Estimates by Age",
col.names = c("Gender", "Age", "Race", "Estimate"))
kable_styling(table3, latex_options = "hold_position")
ipums_gender <- ipums_predictors[c(1,13,5,10,15,11,7,17),1:4]
rownames(ipums_gender) <- NULL
table4 <- ipums_gender %>%
kable(caption = "Comparing Logistic Regression Estimates by Gender",
col.names = c("Gender", "Age", "Race", "Estimate"))
kable_styling(table4, latex_options = "hold_position")
ipums_gender <- ipums_predictors[c(28,32,24,18,2,15,13,6),1:4]
rownames(ipums_gender) <- NULL
table4 <- ipums_gender %>%
kable(caption = "Comparing Logistic Regression Estimates by Gender",
col.names = c("Gender", "Age", "Race", "Estimate"))
kable_styling(table4, latex_options = "hold_position")
ipums_predictors$cell_prop <- ipums_count$count
ipums_predictors <- ipums_data[,c(6,7,9)]
colnames(ipums_predictors) <- c("gender", "age", "race_ethnicity")
ipums_predictors$estimate <-
victory_model %>%
predict(newdata = ipums_predictors)
ipums_predictors <- distinct(ipums_predictors)
ipums_count <- ipums_data %>%
group_by(age, sex, race) %>% summarise(n())
colnames(ipums_count)[4] <- "count"
ipums_count$count <- ipums_count$count/nrow(ipums_data)
ipums_predictors$cell_prop <- ipums_count$count
ipums_predictors <- ipums_data[,c(6,7,9)]
colnames(ipums_predictors) <- c("gender", "age", "race_ethnicity")
ipums_predictors$estimate <-
victory_model %>%
predict(newdata = ipums_predictors)
ipums_predictors <- distinct(ipums_predictors)
ipums_count <- ipums_data %>%
group_by(age, sex, race) %>% summarise(n())
colnames(ipums_count)[4] <- "count"
ipums_count$count <- ipums_count$count/nrow(ipums_data)
ipums_predictors$cell_prop <- ipums_count$count
# Plot race groups
fig1 <- ggplot(df_data, aes(x=race_ethnicity/nrow(df_data))) +
geom_bar(fill = "lightblue", color = "black", na.rm=TRUE) + theme_minimal() +
labs(title = "Figure 1: Race of Respondents", x = "Race", subtitle = "Nationscape",
y = "Number of Respondents") +
scale_x_discrete(labels = c("Asian",
"Black", "White", "Other"))
fig1
# Plot race groups
fig1 <- ggplot(df_data, aes(x=race_ethnicity)) +
geom_bar(fill = "lightblue", color = "black", na.rm=TRUE) + theme_minimal() +
labs(title = "Figure 1: Race of Respondents", x = "Race", subtitle = "Nationscape",
y = "Number of Respondents") +
scale_x_discrete(labels = c("Asian",
"Black", "White", "Other"))
fig1
# Plot race groups
fig1 <- ggplot(df_data, aes(x=race_ethnicity)) +
geom_bar(aes(y=(..count..)/sum(..count..)), fill = "lightblue", color = "black", na.rm=TRUE) + theme_minimal() +
labs(title = "Figure 1: Race of Respondents", x = "Race", subtitle = "Nationscape",
y = "Number of Respondents") +
scale_x_discrete(labels = c("Asian",
"Black", "White", "Other"))
fig1
# Plot race groups
fig1 <- ggplot(df_data, aes(x=race_ethnicity)) +
geom_bar(fill = "lightblue", color = "black", na.rm=TRUE) + theme_minimal() +
labs(title = "Figure 1: Race of Respondents", x = "Race", subtitle = "Nationscape",
y = "Number of Respondents") +
scale_x_discrete(labels = c("Asian",
"Black", "White", "Other"))
fig1
# Plot race groups
fig1 <- ggplot(df_data, aes(x=race_ethnicity)) +
geom_bar(fill = "lightblue", color = "black", na.rm=TRUE) + theme_minimal() +
labs(title = "Figure 1: Race of Respondents", x = "Race", subtitle = "Nationscape",
y = "Number of Respondents")
fig1
fig7 <- ggplot(df_data, aes(x=race_ethnicity)) +
geom_bar(aes(y=(..count..)/sum(..count..)),
fill = "lightblue", color = "black", na.rm=TRUE) + theme_minimal() +
labs(title = "Figure 1: Race of Respondents", x = "Race", subtitle = "Nationscape",
y = "Number of Respondents")
fig7
fig7 <- ggplot(c(df_data,ipums_data), aes(x=c(race_ethnicity, race))) +
geom_bar(aes(y=(..count..)/sum(..count..)),
fill = "lightblue", color = "black", na.rm=TRUE) + theme_minimal() +
labs(title = "Figure 1: Race of Respondents", x = "Race", subtitle = "Nationscape",
y = "Number of Respondents")
df_data %>% group_by(race_ethnicity)
df_data %>% group_by(race_ethnicity) %>% summarise()
df_data %>% group_by(race_ethnicity) %>% summarise(n())
df_data %>% group_by(race_ethnicity) %>% summarise(n()) / nrow(df_data)
df_data %>% group_by(race_ethnicity) %>% summarise(n())
df_data <- df_data[!is.na(df_data$race_ethnicity),]
write.csv(df_data, "data/df_data_clean.csv")
df_data <- read.csv("data/df_data_clean.csv")
# Plot race groups
fig1 <- ggplot(df_data, aes(x=race_ethnicity)) +
geom_bar(fill = "lightblue", color = "black", na.rm=TRUE) + theme_minimal() +
labs(title = "Figure 1: Race of Respondents", x = "Race", subtitle = "Nationscape",
y = "Number of Respondents")
fig1
race_prop <- df_data %>% group_by(race_ethnicity) %>% summarise(n())
race_prop <- race_prop / nrow(df_data)
race_prop
race_prop <- df_data %>% group_by(race_ethnicity) %>% summarise(n())
race_prop
race_prop[,2]
race_prop[,2] <- race_prop[,2] / nrow(df_data)
race_prop
ipums_prop <- ipums_data %>% group_by(race) %>% summarise(n())
ipums_prop[,2] <- ipums_prop[,2] / nrow(ipums_data)
ipums_prop
race_prop <- rbind(df_prop, ipums_prop)
df_prop[,2] <- df_prop[,2] / nrow(df_data)
df_prop <- df_data %>% group_by(race_ethnicity) %>% summarise(n())
df_prop[,2] <- df_prop[,2] / nrow(df_data)
ipums_prop[,2] <- ipums_prop[,2] / nrow(ipums_data)
race_prop <- rbind(df_prop, ipums_prop)
colnames(df_prop)[1] <- "race"
race_prop <- rbind(df_prop, ipums_prop)
fig7 <- ggplot(race_prop, aes(x=race)) +
geom_bar(fill = "lightblue", color = "black", na.rm=TRUE) + theme_minimal() +
labs(title = "Figure 1: Race of Respondents", x = "Race", subtitle = "Nationscape",
y = "Number of Respondents")
fig7
fig7 <- ggplot(race_prop, aes(x=race)) +
geom_bar(fill = "lightblue", color = "black", position = "dodge") + theme_minimal() +
labs(title = "Figure 1: Race of Respondents", x = "Race", subtitle = "Nationscape",
y = "Number of Respondents")
fig7
race_prop
race_prop <- cbind(df_prop, ipums_prop[,2])
race_prop
df_prop <- df_data %>% group_by(race_ethnicity) %>% summarise(n())
df_prop[,2] <- df_prop[,2] / nrow(df_data)
ipums_prop <- ipums_data %>% group_by(race) %>% summarise(n())
ipums_prop[,2] <- ipums_prop[,2] / nrow(ipums_data)
ipums_prop
df_prop
race_prop <- cbind(df_prop, ipums_prop[,2])
race_prop
table5 <- race_prop %>%
kable(caption = "Respondent's Race Across Data Sets",
col.names = c("Race", "Nationscape", "ACS"))
kable_styling(table5, latex_options = "hold_position")
table5 <- race_prop %>%
kable(caption = "Respondent's Race Across Data Sets",
col.names = c("Race", "Nationscape", "ACS"),
digits = c(0, 3, 3))
kable_styling(table5, latex_options = "hold_position")
df_prop <- df_data %>% group_by(gender) %>% summarise(n())
df_prop[,2] <- df_prop[,2] / nrow(df_data)
ipums_prop <- ipums_data %>% group_by(sex) %>% summarise(n())
ipums_prop[,2] <- ipums_prop[,2] / nrow(ipums_data)
gender_prop <- cbind(df_prop, ipums_prop[,2])
rownames(gender_prop) <- NULL
table6 <- gender_prop %>%
kable(caption = "Respondent's Race Across Data Sets",
col.names = c("Race", "Nationscape", "ACS"),
digits = c(0, 3, 3))
kable_styling(table6, latex_options = "hold_position")
df_prop <- df_data %>% group_by(age) %>% summarise(n())
df_prop[,2] <- df_prop[,2] / nrow(df_data)
ipums_prop <- ipums_data %>% group_by(age) %>% summarise(n())
ipums_prop[,2] <- ipums_prop[,2] / nrow(ipums_data)
age_prop <- cbind(df_prop, ipums_prop[,2])
rownames(age_prop) <- NULL
table7 <- age_prop %>%
kable(caption = "Respondent's Race Across Data Sets",
col.names = c("Race", "Nationscape", "ACS"),
digits = c(0, 3, 3))
kable_styling(table7, latex_options = "hold_position")
cite(kableExtra)
cite("kableExtra")
cite(tidyverse)
cite("tidyverse")
citation("tidyverse")
citation("kableExtra")
citation("gridExtra")
set.seed(8675309)
phi <- c(); theta <- c(); sigma <- c()
for(i in 1:10){
arma <- arima.sim(list(ar = 0.9, ma = 0.5, sd = 1), 200)
arma_model <- arima(arma, order = c(1, 0, 1))
phi <- c(phi, arma_model$coef[1])
theta <- c(theta, arma_model$coef[2])
sigma <- c(sigma, arma_model$sigma)
}
phi
theta
sigma
arma_model$coef
arima(arma, order = c(1, 0, 1), method = "ML")
set.seed(8675309)
models <- list()
phi <- c(); theta <- c(); sigma <- c()
for(i in 1:10){
arma <- arima.sim(list(ar = 0.9, ma = 0.5, sd = 1), 200)
arma_model <- arima(arma, order = c(1, 0, 1))
models <- list(models, arma)
phi <- c(phi, arma_model$coef[1])
theta <- c(theta, arma_model$coef[2])
sigma <- c(sigma, arma_model$sigma)
}
phi
theta
sigma
arima(models, order = c(1, 0, 1), method = "ML")
for(i in 1:10){
arima(models[i], order = c(1, 0, 1), method = "ML")
}
View(models)
for(i in 1:10){
arima(models[[i]], order = c(1, 0, 1), method = "ML")
}
set.seed(8675309)
phi <- c(); theta <- c(); sigma <- c()
mle <- list()
for(i in 1:10){
arma <- arima.sim(list(ar = 0.9, ma = 0.5, sd = 1), 200)
arma_model <- arima(arma, order = c(1, 0, 1))
arma_mle <- arima(arma, order = c(1, 0, 1), method = "ML")
phi <- c(phi, arma_model$coef[1])
theta <- c(theta, arma_model$coef[2])
sigma <- c(sigma, arma_model$sigma)
mle <- list(mle, arma_mle)
}
phi
theta
sigma
set.seed(8675309)
phi <- c(); theta <- c(); sigma <- c()
mle <- list()
for(i in 1:10){
arma <- arima.sim(list(ar = 0.9, ma = 0.5, sd = 1), 200)
arma_model <- arima(arma, order = c(1, 0, 1))
arma_mle <- arima(arma, order = c(1, 0, 1), method = "ML")
phi <- c(phi, arma_model$coef[1])
theta <- c(theta, arma_model$coef[2])
sigma <- c(sigma, arma_model$sigma)
mle <- list.append(mle, arma_mle)
}
set.seed(8675309)
phi <- c(); theta <- c(); sigma <- c()
mle <- list()
for(i in 1:10){
arma <- arima.sim(list(ar = 0.9, ma = 0.5, sd = 1), 200)
arma_model <- arima(arma, order = c(1, 0, 1))
arma_mle <- arima(arma, order = c(1, 0, 1), method = "ML")
phi <- c(phi, arma_model$coef[1])
theta <- c(theta, arma_model$coef[2])
sigma <- c(sigma, arma_model$sigma)
mle <- c(mle, arma_mle)
}
phi
theta
sigma
mle
mle[1]
print(mle$coef[1:2])
for(i in 1:10){
print(mle$coef[i][1:2])
}
mle
mle[1]
mle[2]
mle[1]
mle[1][1]
mle[2][1]
mle[1][2]
mle[1][1]
mle[15][1]
mle[15]
mle$coef
mle[1]$coef
mle[15]$coef
mle[i]$coef
for(i in 0:9)
i <- 14 * i + 1
mle[i]$coef
for(i in 0:9)
i <- 14 * i + 1
mle[i]$coef
for(i in 0:9){
i <- 14 * i + 1
mle[i]$coef
}
for(i in 0:9){
i <- 14 * i + 1
mle[i]$coef
}
for(i in 0:9){
i <- 14 * i + 1
print(mle[i]$coef)
}
for(i in 0:9){
i <- 14 * i + 1
print(mle[i]$coef[1:2])
}
help("arima")
library(astsa)
#install.packages(astsa)
library(astsa)
mortality_ar <- ar.ols(cmort, order = 2, demean = FALSE, intercept = TRUE)
martality_ar
mortality_ar <- ar.ols(cmort, order = 2, demean = FALSE, intercept = TRUE)
mortality_ar
mortality_lr <- ar.ols(cmort, order = 2, demean = FALSE, intercept = TRUE)
mortality_lr
mortality_yw <- ar.yw(cmort, order = 2)
mortality_yw
mortality_ar$asy.se.coef
mortality_ar$coef
mortality_ar[1]
mortality_ar[2]
as.vector(mortality_ar[2])
data.frame(ols = mortality_ar[2], yw = mortality_yw[2])
mortality_compare <- data.frame(ols = mortality_ar[2], yw = mortality_yw[2])
colnames(mortality_compare) <- c("phi1", "phi2")
rownames(mortality_compare) <- c("OLS", "Yule-Walker")
# Full table of estimates
table <- mortality_compare %>%
kable(caption = "Linear Regression and Yule-Walker Comparison")
library(kableExtra)
mortality_compare <- data.frame(ols = mortality_ar[2], yw = mortality_yw[2])
colnames(mortality_compare) <- c("phi1", "phi2")
rownames(mortality_compare) <- c("OLS", "Yule-Walker")
# Full table of estimates
table <- kable(mortality_compare, caption = "Linear Regression and Yule-Walker Comparison")
kable_styling(table, latex_options = "hold_position")
mortality_compare <- data.frame(ols = mortality_lr[2], yw = mortality_yw[2])
colnames(mortality_compare) <- c("phi1", "phi2")
rownames(mortality_compare) <- c("OLS", "Yule-Walker")
# Full table of estimates
table <- kable(mortality_compare, caption = "Linear Regression and Yule-Walker Comparison")
kable_styling(table, latex_options = "hold_position")
help(diag)
mortality_lr$asy.se.coef
mortality_yw$asy.se.coef
mortality_yw$asy.var.coef
linmodel$asy.se.coef$ar
mortality_lr$asy.se.coef$ar
sqrt(diag(mortality_yw$asy.var.coef))
mortality_lr$asy.se.coef$ar
sqrt(mortality_yw$asy.var.coef[1,])
sqrt(diag(mortality_yw$asy.var.coef)[1])
mortality_lr$asy.se.coef$ar
sqrt(diag(mortality_yw$asy.var.coef)[1])
arma <- arima.sim(model = list(ar = 0.9, ma = -0.9, sd = 1), n = 500)
plot(arma)
arma <- arima.sim(model = list(ar = 0.9, ma = -0.9, sd = 1), n = 500)
plot(arma, ylab = "ARMA Data", main = "ARMA Model Data")
for(i in 1:3){
arma <- arima.sim(model = list(ar = 0.9, ma = -0.9, sd = 1), n = 500)
plot(arma, ylab = "ARMA Data", main = "ARMA Model Data")
}
"ARMA" + 1
paste("ARMA", 1)
for(i in 1:3){
arma <- arima.sim(model = list(ar = 0.9, ma = -0.9, sd = 1), n = 500)
title <- past("ARMA", i, "Model Data")
plot(arma, ylab = "ARMA Data", main = "ARMA Model Data")
}
for(i in 1:3){
arma <- arima.sim(model = list(ar = 0.9, ma = -0.9, sd = 1), n = 500)
title <- paste("ARMA", i, "Model Data")
plot(arma, ylab = "ARMA Data", main = "ARMA Model Data")
}
for(i in 1:3){
arma <- arima.sim(model = list(ar = 0.9, ma = -0.9, sd = 1), n = 500)
title <- paste("ARMA", i, "Model Data")
plot(arma, ylab = "ARMA Data", main = title)
}
plots <- c()
for(i in 1:3){
arma <- arima.sim(model = list(ar = 0.9, ma = -0.9, sd = 1), n = 500)
title <- paste("ARMA", i, "Model Data")
plots <- c(plots, plot(arma, ylab = "ARMA Data", main = title))
}
plots
plots <- c()
for(i in 1:3){
arma <- arima.sim(model = list(ar = 0.9, ma = -0.9, sd = 1), n = 500)
title <- paste("ARMA", i, "Model Data")
plots <- c(plots, plot(arma, ylab = "ARMA Data", main = title))
}
par(mfrow = c(1,3))
plots
plots <- c()
for(i in 1:3){
arma <- arima.sim(model = list(ar = 0.9, ma = -0.9, sd = 1), n = 500)
title <- paste("ARMA", i, "Model Data")
plot(arma, ylab = "ARMA Data", main = title))
plots <- c()
for(i in 1:3){
arma <- arima.sim(model = list(ar = 0.9, ma = -0.9, sd = 1), n = 500)
title <- paste("ARMA", i, "Model Data")
plot(arma, ylab = "ARMA Data", main = title)
}
plots <- c()
for(i in 1:3){
arma <- arima.sim(model = list(ar = 0.9, ma = -0.9, sd = 1), n = 500)
title <- paste("ARMA", i, "Model Data")
plot(arma, ylab = "ARMA Data", main = title)
acf(arma)
pacf(arma)
}
plots <- c()
for(i in 1:3){
arma <- arima.sim(model = list(ar = 0.9, ma = -0.9, sd = 1), n = 500)
title <- paste("ARMA", i, "Model Data")
par(mfrow = c(1,3))
plot(arma, ylab = "ARMA Data", main = title)
acf(arma)
pacf(arma)
}
mortality_lr <- ar.ols(cmort, order = 2, demean = FALSE, intercept = TRUE)
forecast <- predict(mortality_lr, n.ahead - 4)
forecast <- predict(mortality_lr, n.ahead = 4)
forecast
ts.plot(cmort, forecast$pred, col = 1:2)
ts.plot(cmort, forecast$pred)
, col = 1:2
ts.plot(cmort, forecast$pred, col = 1:2)
upper <- forecast$pred + forecast$se; lower = forecast$pred - forecast$se
upper
lower
ts.plot(cmort, forecast$pred, col = 1:2)
xx = c(time(U), rev(time(U))); y = c(L, rev(U))
xx = c(time(U), rev(time(U))); y = c(L, rev(U))
ts.plot(cmort, forecast$pred, col = 1:2)
xx = c(time(upper), rev(time(upper))); y = c(lower, rev(upper))
polygon(xx, yy, border = 8, col = gray(.6, alpha = .2))
ts.plot(cmort, forecast$pred, col = 1:2)
xx = c(time(upper), rev(time(upper))); yy = c(lower, rev(upper))
polygon(xx, yy, border = 8, col = gray(.6, alpha = .2))
lines(forecast$pred, type = "p", col = 2)
ts.plot(cmort, forecast$pred, col = 1:2)
xx = c(time(upper), rev(time(upper))); yy = c(lower, rev(upper))
polygon(xx, yy, border = 8, col = gray(.6, alpha = .2))
lines(forecast$pred, type = "l", col = 2)
ts.plot(cmort, forecast$pred, col = 1:2, main = "Mortality Data with Forecast"")
xx = c(time(upper), rev(time(upper))); yy = c(lower, rev(upper))
polygon(xx, yy, border = 8, col = gray(.6, alpha = .2))
lines(forecast$pred, type = "l", col = 2)
ts.plot(cmort, forecast$pred, col = 1:2, main = "Mortality Data with Forecast")
xx = c(time(upper), rev(time(upper))); yy = c(lower, rev(upper))
polygon(xx, yy, border = 8, col = gray(.6, alpha = .2))
lines(forecast$pred, type = "l", col = 2)
upper
upper[1]
upper[[1]]
data.frame(upper_bound = upper, lower_bound = lower)
ci <- data.frame("Lower Bound" = lower, "Upper Bound" = upper)
ci
ts.plot(cmort, forecast$pred, col = 1:2, main = "Mortality Data with Forecast")
xx = c(time(upper), rev(time(upper))); yy = c(lower, rev(upper))
polygon(xx, yy, border = 8, col = gray(.6, alpha = .2))
lines(forecast$pred, type = "l", col = 2)
